diff -Naurp frama-c-Boron-20100401-orig/src/value/eval.ml frama-c-Boron-20100401/src/value/eval.ml
--- frama-c-Boron-20100401/src/value/eval.ml	2010-04-13 11:52:01.000000000 +0000
+++ frama-c-Boron-20100401/src/value/eval.ml	2010-07-04 20:28:33.000000000 +0000
@@ -1854,7 +1854,7 @@ let make_well size hidden_base state loc
 
 (** [initialize_var_using_type varinfo state] uses the type of [varinfo]
     to create an initial value in [state]. *)
-let initialize_var_using_type varinfo state =
+let initialize_all_var_using_type always varinfo state =
   CurrentLoc.set varinfo.vdecl;
   let rec add_offsetmap depth v name_desc name typ offset_orig typ_orig state =
     let typ = Cil.unrollType typ in
@@ -1905,7 +1905,10 @@ let initialize_var_using_type varinfo st
 	    (Cvalue_type.V.top_leaf_origin ())
       | TPtr (typ, _) as full_typ
 	  when depth <= Value_parameters.AutomaticContextMaxDepth.get () ->
-          let attr = typeAttr full_typ in
+
+	  if always then Relations_type.Model.add_binding_unspecified state loc
+	    
+	  else (let attr = typeAttr full_typ in
 
           if not (isVoidType typ) && not (isFunctionType typ) then
             let i = match findAttribute "arraylen" attr with
@@ -1973,7 +1976,7 @@ let initialize_var_using_type varinfo st
 		 else
 		   Base.Unknown (Int.zero,Bit_utils.max_bit_address ()))
             in
-            make_well (Bit_utils.max_bit_size ()) hidden_base state loc
+            make_well (Bit_utils.max_bit_size ()) hidden_base state loc)
 
       | TArray (typ, len, _, _) ->
           begin try
@@ -2093,6 +2096,12 @@ let initialize_var_using_type varinfo st
     (Base.create_varinfo varinfo)
     varinfo.vname varinfo.vname varinfo.vtype NoOffset varinfo.vtype state
 
+let always_initialize_var_using_type varinfo state =
+  initialize_all_var_using_type true varinfo state
+
+let initialize_var_using_type varinfo state =
+  initialize_all_var_using_type false varinfo state
+
 let initial_state_only_globals =
   let module S =
     Computation.OptionRef
@@ -2216,6 +2225,8 @@ function () ->
              if varinfo.vstorage = Extern then
                (* Must not initialize when the storage is extern. *)
                state := initialize_var_using_type varinfo !state
+	     else if Parameters.Dynamic.Bool.get "-always-init-globals" then
+	       state := always_initialize_var_using_type varinfo !state
              else complete_init 0 varinfo.vtype [] (Var varinfo,NoOffset)
 	       (*       | None ->
                (* Cannot initialize with a default when type is incomplete. *)
@@ -4765,13 +4776,20 @@ let compute_with_initial_state kf initia
     | Declaration _ -> assert false
     | Definition (f,_) ->
         let initial_state =
-	  List.fold_left
-	    (fun acc local ->
-               Relations_type.Model.add_binding_unspecified
-                 acc
-                 (Locations.loc_of_varinfo local))
-	    initial_state
-	    f.slocals
+	  if Parameters.Dynamic.Bool.get "-always-init-locals"
+          then
+            List.fold_right
+              always_initialize_var_using_type
+              f.slocals
+              initial_state
+          else
+            List.fold_left
+              (fun acc local ->
+                 Relations_type.Model.add_binding_unspecified
+                   acc
+                   (Locations.loc_of_varinfo local))
+              initial_state
+              f.slocals
         in
         let initial_state = check_fct_preconditions kf initial_state in
 	compute_using_cfg kf initial_state
diff -Naurp frama-c-Boron-20100401-orig/src/value/value_parameters.ml frama-c-Boron-20100401/src/value/value_parameters.ml
--- frama-c-Boron-20100401-orig/src/value/value_parameters.ml	2010-04-13 11:52:01.000000000 +0000
+++ frama-c-Boron-20100401/src/value/value_parameters.ml	2010-07-04 20:27:15.000000000 +0000
@@ -161,6 +161,24 @@ module PropagateTop =
 let () = add_dependency PropagateTop.self
 
 let () = Plugin.set_group precision_tuning
+module AlwaysInitLocals =
+  False
+    (struct
+       let option_name = "-always-init-locals"
+       let descr = "define uninitialized locals like extern variables"
+     end)
+let () = add_dependency AlwaysInitLocals.self
+
+let () = Plugin.set_group precision_tuning
+module AlwaysInitGlobals =
+  False
+    (struct
+       let option_name = "-always-init-globals"
+       let descr = "define uninitialized globals like extern variables"
+     end)
+let () = add_dependency AlwaysInitGlobals.self
+
+let () = Plugin.set_group precision_tuning
 module WideningLevel =
   Int
     (struct
diff -Naurp frama-c-Boron-20100401-orig/src/value/value_parameters.mli frama-c-Boron-20100401/src/value/value_parameters.mli
--- frama-c-Boron-20100401-orig/src/value/value_parameters.mli	2010-04-13 11:52:01.000000000 +0000
+++ frama-c-Boron-20100401/src/value/value_parameters.mli	2010-07-04 20:27:15.000000000 +0000
@@ -27,6 +27,9 @@ module ForceValues: Plugin.BOOL
 
 module PropagateTop: Plugin.BOOL
 
+module AlwaysInitLocals: Plugin.BOOL
+module AlwaysInitGlobals: Plugin.BOOL
+
 module AutomaticContextMaxDepth: Plugin.INT
 module AutomaticContextMaxWidth: Plugin.INT
 
