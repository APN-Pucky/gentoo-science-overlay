diff -Naur frama-c-Beryllium-20090601-beta1-orig/src/from/from_register.ml frama-c-Beryllium-20090601-beta1-ptch/src/from/from_register.ml
--- frama-c-Beryllium-20090601-beta1-orig/src/from/from_register.ml	2009-06-12 09:12:22.000000000 +0000
+++ frama-c-Beryllium-20090601-beta1-ptch/src/from/from_register.ml	2009-07-12 03:33:40.000000000 +0000
@@ -554,7 +554,7 @@
     Db.Value.is_reachable (Values_To_Use.get_state (Kstmt stmt))
 
   (* Remove all local variables and formals from table *)
-  let externalize return fundec state =
+  let externalize return fundec state strip =
     let deps_return = (match return.skind with
                          | Return (Some ({enode = Lval v}),_) ->
                              let deps, target =
@@ -578,9 +578,10 @@
                              Lmap_bitwise.From_Model.LOffset.empty
                          | _ -> assert false)
     in
-    let deps_table = Lmap_bitwise.From_Model.filter_base
+    let deps_table = if strip then Lmap_bitwise.From_Model.filter_base
       (fun v -> not (Base.is_formal_or_local v fundec))
       state.deps_table
+      else state.deps_table
     in
     { deps_return = deps_return;
       Function_Froms.deps_table = deps_table }
@@ -611,7 +612,7 @@
           in { d with deps_table = deps_table }
 end
 
-let compute_using_cfg kf = match kf.fundec with
+let compute_using_cfg kf ksid = match kf.fundec with
   | Declaration _ -> assert false
   | Definition (f,_) ->
       try
@@ -659,6 +660,10 @@
               Format.printf "[from] stack with %s\n@\n" (get_name g))
               call_stack;*)
 
+            let sid,strip = match ksid with
+                              None -> ret_id.sid,true
+                            | Some id -> id,false
+            in
             let last_from =
               try
 		if Db.Value.is_reachable (Values_To_Use.get_state (Kstmt ret_id))
@@ -666,7 +671,8 @@
                   Computer.externalize
                   ret_id
                   f
-                  (Computer.StmtStartData.find ret_id.sid)
+                  (Computer.StmtStartData.find sid)
+                  strip
 		else
 		  raise Not_found
               with Not_found -> begin
@@ -809,7 +815,7 @@
 
   let result = match kf.fundec with
     | Definition _ ->
-        compute_using_cfg kf
+        compute_using_cfg kf None
     | Declaration _ ->
         compute_using_prototype kf
   in
@@ -849,7 +855,8 @@
 let () =
   force_compute := From2.compute;
   Db.From.compute := (fun kf -> ignore (Functionwise_From_to_use.memo kf));
-  Db.From.get := Functionwise_From_to_use.memo
+  Db.From.get := Functionwise_From_to_use.memo;
+  Db.From.compute_using_cfg := From2.compute_using_cfg
 
 let () = Db.From.pretty :=
   (fun fmt v ->
diff -Naur frama-c-Beryllium-20090601-beta1-orig/src/kernel/db.ml frama-c-Beryllium-20090601-beta1-ptch/src/kernel/db.ml
--- frama-c-Beryllium-20090601-beta1-orig/src/kernel/db.ml	2009-06-23 09:08:08.000000000 +0000
+++ frama-c-Beryllium-20090601-beta1-ptch/src/kernel/db.ml	2009-07-12 03:33:40.000000000 +0000
@@ -443,6 +443,7 @@
   let is_computed = mk_fun "From.is_computed"
   let pretty = mk_fun "From.pretty"
   let get = mk_fun "From.get"
+  let compute_using_cfg = mk_fun "From.compute_using_cfg"
   let self = ref Project.Computation.dummy
   let display = mk_fun "From.display"
   module Callwise = struct
diff -Naur frama-c-Beryllium-20090601-beta1-orig/src/kernel/db.mli frama-c-Beryllium-20090601-beta1-ptch/src/kernel/db.mli
--- frama-c-Beryllium-20090601-beta1-orig/src/kernel/db.mli	2009-06-23 13:53:48.000000000 +0000
+++ frama-c-Beryllium-20090601-beta1-ptch/src/kernel/db.mli	2009-07-12 03:35:29.000000000 +0000
@@ -330,6 +330,7 @@
 	@return true iff the analysis has been performed *)
 
   val get : (kernel_function -> Function_Froms.t) ref
+  val compute_using_cfg : (kernel_function -> int option -> Function_Froms.t) ref
   val access : (Locations.Zone.t -> from_model -> Locations.Zone.t) ref
   val find_deps_no_transitivity : (kinstr -> exp -> Locations.Zone.t) ref
   val self: Project.Computation.t ref
