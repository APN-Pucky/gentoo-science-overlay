diff -Naurp frama-c-Beryllium-20090901-orig/src/value/eval.ml frama-c-Beryllium-20090901-ptch/src/value/eval.ml
--- frama-c-Beryllium-20090901-orig/src/value/eval.ml	2009-08-31 15:38:54.000000000 +0000
+++ frama-c-Beryllium-20090901-ptch/src/value/eval.ml	2009-11-25 16:46:06.000000000 +0000
@@ -1685,7 +1685,6 @@ let make_well size hidden_base state loc
     loc
     well
 
-
 (** [initialize_var_using_type varinfo state] uses the type of [varinfo]
     to create an initial value in [state]. *)
 let initialize_var_using_type varinfo state =
@@ -1926,6 +1925,12 @@ let initialize_var_using_type varinfo st
     (Base.create_varinfo varinfo)
     varinfo.vname varinfo.vname varinfo.vtype NoOffset varinfo.vtype state
 
+let always_initialize_var_using_type varinfo state =
+  match Cil.unrollType varinfo.vtype with
+  | TPtr _ -> Relations_type.Model.add_binding_unspecified state
+                (loc_of_typoffset (Base.create_varinfo varinfo) varinfo.vtype NoOffset)
+  | _ -> initialize_var_using_type varinfo state
+
 let initial_state_only_globals () =
   Value_parameters.feedback "Computing globals values";
   let state = ref Relations_type.Model.empty in
@@ -2034,6 +2039,8 @@ let initial_state_only_globals () =
              if varinfo.vstorage = Extern then
                (* Must not initialize when the storage is extern. *)
                state := initialize_var_using_type varinfo !state
+	     else if Parameters.Dynamic.Bool.get "-always-init-globals" then
+	       state := always_initialize_var_using_type varinfo !state
              else complete_init 0 varinfo.vtype [] (Var varinfo,NoOffset)
 	       (*       | None ->
                (* Cannot initialize with a default when type is incomplete. *)
@@ -4315,13 +4322,20 @@ let compute_with_initial_state kf initia
     | Definition (f,_) ->
         let initial_state = check_precondition kf initial_state in
         let initial_state =
-	  List.fold_left
-	    (fun acc local ->
-               Relations_type.Model.add_binding_unspecified
-                 acc
-                 (Locations.loc_of_varinfo local))
-	    initial_state
-	    f.slocals
+	  if not (Parameters.Dynamic.Bool.get "-always-init-locals")
+	  then
+	    List.fold_left
+	      (fun acc local ->
+                 Relations_type.Model.add_binding_unspecified
+                   acc
+                   (Locations.loc_of_varinfo local))
+	      initial_state
+	      f.slocals
+          else
+            List.fold_right
+              always_initialize_var_using_type
+              f.slocals
+              initial_state
         in
 	compute_using_cfg kf (ref (State_set.singleton initial_state))
 
diff -Naurp frama-c-Beryllium-20090901-orig/src/value/value_parameters.ml frama-c-Beryllium-20090901-ptch/src/value/value_parameters.ml
--- frama-c-Beryllium-20090901-orig/src/value/value_parameters.ml	2009-08-31 15:38:54.000000000 +0000
+++ frama-c-Beryllium-20090901-ptch/src/value/value_parameters.ml	2009-11-25 15:07:18.000000000 +0000
@@ -136,6 +136,24 @@ module PropagateTop =
 let () = add_dependency PropagateTop.self
 
 let () = Plugin.set_group precision_tuning
+module AlwaysInitLocals =
+  False
+    (struct
+       let option_name = "-always-init-locals"
+       let descr = "define uninitialized locals like extern variables"
+     end)
+let () = add_dependency AlwaysInitLocals.self
+
+let () = Plugin.set_group precision_tuning
+module AlwaysInitGlobals =
+  False
+    (struct
+       let option_name = "-always-init-globals"
+       let descr = "define uninitialized globals like extern variables"
+     end)
+let () = add_dependency AlwaysInitGlobals.self
+
+let () = Plugin.set_group precision_tuning
 module WideningLevel =
   Int
     (struct
diff -Naurp frama-c-Beryllium-20090901-orig/src/value/value_parameters.mli frama-c-Beryllium-20090901-ptch/src/value/value_parameters.mli
--- frama-c-Beryllium-20090901-orig/src/value/value_parameters.mli	2009-08-31 15:38:54.000000000 +0000
+++ frama-c-Beryllium-20090901-ptch/src/value/value_parameters.mli	2009-11-25 14:58:46.000000000 +0000
@@ -29,6 +29,9 @@ module WarnUnspecifiedOrder: Plugin.BOOL
 
 module PropagateTop: Plugin.BOOL
 
+module AlwaysInitLocals: Plugin.BOOL
+module AlwaysInitGlobals: Plugin.BOOL
+
 module AutomaticContextMaxDepth: Plugin.INT
 module AutomaticContextMaxWidth: Plugin.INT
 
