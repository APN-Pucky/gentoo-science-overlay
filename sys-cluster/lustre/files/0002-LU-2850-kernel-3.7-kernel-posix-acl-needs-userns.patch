From 4cc5a5711dea1e5bebd2cd1812955cc0cf84a8ac Mon Sep 17 00:00:00 2001
From: Peng Tao <tao.peng@emc.com>
Date: Tue, 26 Feb 2013 16:31:44 +0800
Subject: [PATCH 2/6] LU-2850 kernel: 3.7 kernel posix acl needs userns

With upstream commit 5f3a4a28, kernel posix acl adds support
to user namespace.

Signed-off-by: Peng Tao <tao.peng@emc.com>
Change-Id: I7d82c51c482daae8a7dbb526b8d72eea2bcf0650
---
 lustre/autoconf/lustre-core.m4 | 26 ++++++++++++++++++++++++++
 lustre/include/liblustre.h     | 11 ++++++++++-
 lustre/llite/xattr.c           |  6 +++++-
 lustre/mdc/mdc_request.c       |  6 +++++-
 4 files changed, 46 insertions(+), 3 deletions(-)

diff --git a/lustre/autoconf/lustre-core.m4 b/lustre/autoconf/lustre-core.m4
index 3c773e8..38d26a3 100644
--- a/lustre/autoconf/lustre-core.m4
+++ b/lustre/autoconf/lustre-core.m4
@@ -328,6 +328,7 @@ AC_TRY_RUN([
         #define __LINUX_POSIX_ACL_H
 
         #ifdef CONFIG_FS_POSIX_ACL
+	struct user_namespace;
         # include <linux/posix_acl_xattr.h>
         #endif
 
@@ -2213,6 +2214,28 @@ LB_LINUX_TRY_COMPILE([
 ])
 
 #
+# 3.7 posix acl supports user ns
+# see upstream commit 5f3a4a28
+#
+AC_DEFUN([LC_HAVE_POSIX_ACL_NAMESPACE],
+[AC_MSG_CHECKING([if posix acl supports user namespace])
+LB_LINUX_TRY_COMPILE([
+	#include <linux/fs.h>
+	#include <linux/posix_acl_xattr.h>
+	#include <linux/user_namespace.h>
+],[
+	struct user_namespace *user_ns;
+	posix_acl_from_xattr(user_ns, NULL, 0);
+],[
+	AC_DEFINE(HAVE_POSIX_ACL_NAMESPACE, 1,
+		  [have posix acl supports user namespace])
+	AC_MSG_RESULT([yes])
+],[
+	AC_MSG_RESULT([no])
+])
+])
+
+#
 # LC_PROG_LINUX
 #
 # Lustre linux kernel checks
@@ -2391,6 +2414,9 @@ AC_DEFUN([LC_PROG_LINUX],
 	 LC_DENTRY_OPEN_USE_PATH
 	 LC_HAVE_IOP_ATOMIC_OPEN
 
+	 # 3.7
+	 LC_HAVE_POSIX_ACL_NAMESPACE
+
 	 #
 	 if test x$enable_server = xyes ; then
 		AC_DEFINE(HAVE_SERVER_SUPPORT, 1, [support server])
diff --git a/lustre/include/liblustre.h b/lustre/include/liblustre.h
index 14f3ef6..be4652e 100644
--- a/lustre/include/liblustre.h
+++ b/lustre/include/liblustre.h
@@ -452,8 +452,17 @@ static inline size_t posix_acl_xattr_size(int count)
                sizeof(posix_acl_xattr_entry);
 }
 
+#ifdef HAVE_POSIX_ACL_NAMESPACE
+struct user_namespace {};
+struct user_namespace init_user_ns;
+
+static inline
+struct posix_acl *posix_acl_from_xattr(struct user_namespace *user_ns,
+					const void *value, size_t size)
+#else
 static inline
-struct posix_acl * posix_acl_from_xattr(const void *value, size_t size)
+struct posix_acl *posix_acl_from_xattr(const void *value, size_t size)
+#endif
 {
         return NULL;
 }
diff --git a/lustre/llite/xattr.c b/lustre/llite/xattr.c
index 24a89eb..d0349e2 100644
--- a/lustre/llite/xattr.c
+++ b/lustre/llite/xattr.c
@@ -345,7 +345,11 @@ int ll_getxattr_common(struct inode *inode, const char *name,
                 if (!acl)
                         RETURN(-ENODATA);
 
-                rc = posix_acl_to_xattr(acl, buffer, size);
+#ifdef HAVE_POSIX_ACL_NAMESPACE
+		rc = posix_acl_to_xattr(&init_user_ns, acl, buffer, size);
+#else
+		rc = posix_acl_to_xattr(acl, buffer, size);
+#endif
                 posix_acl_release(acl);
                 RETURN(rc);
         }
diff --git a/lustre/mdc/mdc_request.c b/lustre/mdc/mdc_request.c
index 772502b..608813c 100644
--- a/lustre/mdc/mdc_request.c
+++ b/lustre/mdc/mdc_request.c
@@ -466,7 +466,11 @@ static int mdc_unpack_acl(struct ptlrpc_request *req, struct lustre_md *md)
         if (!buf)
                 RETURN(-EPROTO);
 
-        acl = posix_acl_from_xattr(buf, body->aclsize);
+#ifdef HAVE_POSIX_ACL_NAMESPACE
+	acl = posix_acl_from_xattr(&init_user_ns, buf, body->aclsize);
+#else
+	acl = posix_acl_from_xattr(buf, body->aclsize);
+#endif
         if (IS_ERR(acl)) {
                 rc = PTR_ERR(acl);
                 CERROR("convert xattr to acl: %d\n", rc);
-- 
1.8.1.5

