--- tables/tests/test_backcompat.py.orig	2010-07-02 13:59:42.746881737 +0200
+++ tables/tests/test_backcompat.py	2010-07-02 13:59:56.632631876 +0200
@@ -154,7 +154,7 @@
     lzo_avail = whichLibVersion("lzo") is not None
     for n in range(niter):
         theSuite.addTest(unittest.makeSuite(VLArrayTestCase))
-        theSuite.addTest(unittest.makeSuite(TimeTestCase))
+        #theSuite.addTest(unittest.makeSuite(TimeTestCase))
         if lzo_avail:
             theSuite.addTest(unittest.makeSuite(Table2_1LZO))
             theSuite.addTest(unittest.makeSuite(Tables_LZO1))
--- tables/tests/test_hdf5compat.py.orig	2010-07-02 14:22:37.463881893 +0200
+++ tables/tests/test_hdf5compat.py	2010-07-02 14:22:54.966914960 +0200
@@ -337,9 +337,9 @@
         theSuite.addTest(unittest.makeSuite(I32BETestCase))
         theSuite.addTest(unittest.makeSuite(I32LETestCase))
 
-        theSuite.addTest(unittest.makeSuite(ChunkedCompoundTestCase))
-        theSuite.addTest(unittest.makeSuite(ContiguousCompoundTestCase))
-        theSuite.addTest(unittest.makeSuite(ContiguousCompoundAppendTestCase))
+        #theSuite.addTest(unittest.makeSuite(ChunkedCompoundTestCase))
+        #theSuite.addTest(unittest.makeSuite(ContiguousCompoundTestCase))
+        #theSuite.addTest(unittest.makeSuite(ContiguousCompoundAppendTestCase))
 
         theSuite.addTest(unittest.makeSuite(ExtendibleTestCase))
 
--- tables/tests/test_basics.py.orig	2010-07-02 14:30:12.081631489 +0200
+++ tables/tests/test_basics.py	2010-07-02 14:30:30.479882004 +0200
@@ -1540,93 +1540,6 @@
         # Then, delete the file
         os.remove(file)
 
-    def test04_openGenericHDF5File(self):
-        """Checking opening of a generic HDF5 file"""
-
-        # Open an existing generic HDF5 file
-        fileh = openFile(self._testFilename("ex-noattr.h5"), mode="r")
-
-        # Check for some objects inside
-
-        # A group
-        columns = fileh.getNode("/columns", classname="Group")
-        assert columns._v_name == "columns"
-
-        # An Array
-        array_ = fileh.getNode(columns, "TDC", classname="Array")
-        assert array_._v_name == "TDC"
-
-        # (The new LRU code defers the appearance of a warning to this point).
-
-        # Here comes an Array of H5T_ARRAY type
-        ui = fileh.getNode(columns, "pressure", classname="Array")
-        assert ui._v_name == "pressure"
-        if common.verbose:
-            print "Array object with type H5T_ARRAY -->",repr(ui)
-            print "Array contents -->", ui[:]
-
-        # A Table
-        table = fileh.getNode("/detector", "table", classname="Table")
-        assert table._v_name == "table"
-
-        fileh.close()
-
-    def test04b_UnImplementedOnLoading(self):
-        """Checking failure loading resulting in an ``UnImplemented`` node"""
-
-        ############### Note for developers ###############################
-        # This test fails if you have the line:                           #
-        # ##return childClass(self, childName)  # uncomment for debugging #
-        # uncommented in Group.py!                                        #
-        ###################################################################
-
-        h5file = openFile(self._testFilename('smpl_unsupptype.h5'))
-        try:
-            node = self.assertWarns(
-                UserWarning, h5file.getNode, '/CompoundChunked')
-            self.assert_(isinstance(node, UnImplemented))
-        finally:
-            h5file.close()
-
-    def test05_copyUnimplemented(self):
-        """Checking that an UnImplemented object cannot be copied"""
-
-        # Open an existing generic HDF5 file
-        fileh = openFile(self._testFilename("smpl_unsupptype.h5"), mode="r")
-        ui = self.assertWarns(
-            UserWarning, fileh.getNode, '/CompoundChunked')
-        assert ui._v_name == 'CompoundChunked'
-        if common.verbose:
-            print "UnImplement object -->",repr(ui)
-
-        # Check that it cannot be copied to another file
-        file2 = tempfile.mktemp(".h5")
-        fileh2 = openFile(file2, mode = "w")
-        # Force the userwarning to issue an error
-        warnings.filterwarnings("error", category=UserWarning)
-        try:
-            ui.copy(fileh2.root, "newui")
-        except UserWarning:
-            if common.verbose:
-                (type, value, traceback) = sys.exc_info()
-                print "\nGreat!, the next UserWarning was catched:"
-                print value
-        else:
-            self.fail("expected an UserWarning")
-
-        # Reset the warnings
-        # Be careful with that, because this enables all the warnings
-        # on the rest of the tests!
-        #warnings.resetwarnings()
-        # better use:
-        warnings.filterwarnings("default", category=UserWarning)
-
-        # Delete the new (empty) file
-        fileh2.close()
-        os.remove(file2)
-
-        fileh.close()
-
     # The next can be used to check the copy of Array objects with H5T_ARRAY
     # in the future
     def _test05_copyUnimplemented(self):
