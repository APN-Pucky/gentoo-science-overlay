# Copyright 2010 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: $

DESCRIPTION="Manage /usr/bin/gnuplot implementations"
MAINTAINER="kleiner_otti@gmx.de"
SVN_DATE='$Date: $'
VERSION='0.1'
TEX_UPDATE="no"

# find a list of gnuplot symlink targets, best first
find_targets() {
	local f
	for f in $( cd "${ROOT}/usr/bin"; ls gnuplot-?.? | sort -r ); do
		[[ -f "${ROOT}/usr/bin/${f}" ]] && echo ${f}
	done
}

have()
{
    unset -v have
    PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin type $1 >&/dev/null && have="yes"
}

rm_tex_symlinks() {
	local x
	for x in ${ROOT}/usr/share/texmf-site/tex/latex/gnuplot/*; do
		[ -d "${x}" ] && continue
		if [ -L "${x}" ]; then
			rm -f "${x}" &>/dev/null 
			TEX_UPDATE="yes"
			continue
		fi
		die -q "${x} confuses me" 
	done
}

# try to remove the gnuplot symlinks
remove_symlinks() {
	rm -f "${ROOT}"/usr/bin/gnuplot &>/dev/null && \
	rm -f "${ROOT}"/usr/share/man/man1/gnuplot.1{,.gz,.bz2} &>/dev/null && \
	rm -f "${ROOT}"/usr/share/info/gnuplot.info{,.gz,.bz2} &>/dev/null && \
	rm_tex_symlinks
}

# set a man page symlink
set_man_symlink() {
	local target="${1}" link_name="${2}" x extension

	for x in ".1" ".1.bz2" ".1.gz" ; do
		if [[ -e /usr/share/man/man1/${target}${x} ]] ; then
			extension="${x}"
			break
		fi
	done

	if [[ -z "${extension}" ]] ; then
		echo "Couldn't find a man page for ${target}; skipping." 1>&2
		return 1
	fi

	ln -s "${target}${extension}" \
		"${ROOT}/usr/share/man/man1/${link_name}${extension}"
}

# set a info page symlink
set_info_symlink() {
	local target="${1}" link_name="${2}" x extension

	for x in ".info.bz2" ".info.gz" ; do
		if [[ -e /usr/share/info/${target}${x} ]] ; then
			extension="${x}"
			break
		fi
	done

	if [[ -z "${extension}" ]] ; then
		echo "Couldn't find a info page for ${target}; skipping." 1>&2
		return 1
	fi

	ln -s "${target}${extension}" \
		"${ROOT}/usr/share/info/${link_name}${extension}"
}

#link tex files to gnuplot dir
#useful because lower dir level is found first
set_tex_symlink() {
	local target="${1}" x

	for x in /usr/share/texmf-site/tex/latex/gnuplot/${target#gnuplot-}/* ; do
		[ -e "${x}" ] &&
		ln -s "${target#gnuplot-}/${x##*/}" \
			"/usr/share/texmf-site/tex/latex/gnuplot/${x##*/}" && TEX_UPDATE="yes"
	done
}

# set the gnuplot symlinks
set_symlinks() {
	local target="${1}" targets
	if is_number "${target}" && [[ ${target} -ge 1 ]] ; then
		targets=( $(find_targets ) )
		target=${targets[$(( ${target} - 1 ))]}
	fi
	if [[ -f "${ROOT}/usr/bin/${target}" ]] ; then
		remove_symlinks

		# it's okay if these fail
		set_man_symlink "${target}" "gnuplot"
		set_info_symlink "${target}" "gnuplot"
		set_tex_symlink "${target}"

		# it's not okay if these fail
		ln -s "${ROOT}/usr/bin/${target}" "${ROOT}/usr/bin/gnuplot" || \
			die "Couldn't set ${target} /usr/bin/gnuplot symlink"
	else
		die -q  "Target \"${1}\" doesn't appear to be valid!"
	fi
}

### show action ###

describe_show() {
	echo "Show the current gnuplot implementation"
}

do_show() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	write_list_start "Current gnuplot implementation:"
	if [[ -L "${ROOT}/usr/bin/gnuplot" ]] ; then
		write_kv_list_entry "$(basename $(canonicalise ${ROOT}/usr/bin/gnuplot ) )" ""
	elif [[ -e "${ROOT}/usr/bin/gnuplot" ]] ; then
		write_kv_list_entry "(not a symlink)" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available gnuplot implementations"
}

do_list() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	local i targets
	targets=( $(find_targets ) )
	if [[ -n ${targets[@]} ]] ; then
		for (( i = 0 ; i < ${#targets[@]} ; i = i + 1 )) ; do
			[[ ${targets[${i}]} == $(basename $(canonicalise ${ROOT}/usr/bin/gnuplot ) ) ]] && \
				targets[${i}]="${targets[${i}]} $(highlight '*' )"
		done
		write_list_start "Available gnuplot implementations:"
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set a new gnuplot implementation provider"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	if [[ -z "${1}" ]] ; then
		die -q "You didn't give me a provider name"

	elif [[ -n "${2}" ]] ; then
		die -q "Too many parameters"

	elif [[ -L "${ROOT}/usr/bin/gnuplot" ]] ; then
		if ! remove_symlinks ; then
			die -q "Can't remove existing provider"
		elif ! set_symlinks "${1}" ; then
			die -q "Can't set new provider"
		fi

	elif [[ -e "${ROOT}/usr/bin/gnuplot" ]] ; then
		die -q "Sorry, ${ROOT}/usr/bin/gnuplot confuses me"

	else
		set_symlinks "${1}" || die -q "Can't set a new provider"
	fi
	if [ "$TEX_UPDATE" = "yes" ]; then 
		have texmf-update || die -q "texmf-update is missing"
		texmf-update || die -q "texmf-update failed"
	fi
}

### update action ###

describe_update() {
	echo "Automatically update the gnuplot provider"
}

describe_update_options() {
	echo "--if-unset     : Do not override existing implementation"
	echo "--no-texupdate : Do not run texmf-update"
}

do_update() {
	local if_unset=false texupdate=true
	while [[ $# > 0 ]]; do
		case $1 in
			--if-unset)
				if_unset=true
				;;
			--no-texupdate)
				texupdate=false
				;;
			*)
				die -q "Unrecognized option '$1'"
				;;
		esac
		shift
	done

	if [[ -L "${ROOT}/usr/bin/gnuplot" ]] ; then
		${if_unset} && return
		remove_symlinks || die -q "Can't remove existing link"
	fi
	if [[ -e "${ROOT}/usr/bin/gnuplot" ]] ; then
		die -q "Can't set a new provider"
	elif ! [[ -z $(find_targets ) ]] ; then
		set_symlinks 1 || die -q "Can't set a new provider"
	fi
	if $texupdate && [ "$TEX_UPDATE" = "yes" ]; then 
		have texmf-update || die -q "texmf-update is missing"
		texmf-update || die -q "texmf-update failed"
	fi
}

# vim: set ft=eselect :

